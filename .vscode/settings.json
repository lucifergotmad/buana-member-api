{
  // file templates plugin
  "folderTemplates.fileTemplates": {
    "create-connection-name": [
      "export const <FTName | pascalcase>ConnectionName = Object.freeze({",
      "  PRIMARY: '<FTName | pascalcase>PrimaryDB',",
      "  ONLINE: '<FTName | pascalcase>OnlineDB',",
      "});"
    ],
    "create-provider-name": [
      "export const <FTName | pascalcase>ProviderName = Object.freeze({",
      "  PRIMARY: '<FTName | pascalcase>PrimaryProvider',",
      "  ONLINE: '<FTName | pascalcase>OnlineProvider',",
      "});"
    ],
    "create-mongo-entity": [
      "import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';",
      "import { Document } from 'mongoose';",
      "import { BaseMongoEntity } from 'src/core/base-classes/infra/mongo-entity.base';",
      "",
      "@Schema({ collection: '<FTName | plural>' })",
      "export class <FTName | pascalcase>MongoEntity extends BaseMongoEntity<typeof <FTName | pascalcase>MongoEntity> {",
      "  // Put your schema here",
      "  ",
      "}",
      "",
      "export const <FTName | pascalcase>Schema = SchemaFactory.createForClass(<FTName | pascalcase>MongoEntity);",
      "export const <FTName | pascalcase>Model = [{ name: <FTName | pascalcase>MongoEntity.name, schema: <FTName | pascalcase>Schema }];",
      "",
      "export type <FTName | pascalcase>Document = <FTName | pascalcase>MongoEntity & Document;",
      ""
    ],
    "create-entity": [
      "import { AggregateRoot } from 'src/core/base-classes/domain/aggregate-root';",
      "",
      "export interface <FTName | pascalcase>Props {",
      "  // put field interface here",
      "  name: string",
      "}",
      "",
      "export class <FTName | pascalcase>Entity extends AggregateRoot<<FTName | pascalcase>Props> {",
      "  constructor(props: <FTName | pascalcase>Props) {",
      "    super(props);",
      "  }",
      "",
      "  static create(props: <FTName | pascalcase>Props) {",
      "    return new <FTName | pascalcase>Entity(props);",
      "  }",
      "}",
      ""
    ],
    "create-mapper": [
      "import {",
      "  DbMapper,",
      "  MongoEntityProps,",
      "} from 'src/core/base-classes/domain/db-mapper';",
      "import { <FTName | pascalcase>Entity } from '../../domain/<FTName | paramcase>.entity'",
      "import { <FTName | pascalcase>MongoEntity } from './<FTName | paramcase>.mongo-entity'",
      "",
      "export class <FTName | pascalcase>MongoMapper extends DbMapper<<FTName | pascalcase>Entity, <FTName | pascalcase>MongoEntity> {",
      "  protected toMongoProps(",
      "\tentity: <FTName | pascalcase>Entity",
      "  ): MongoEntityProps<<FTName | pascalcase>MongoEntity> {",
      "\tconst props = entity.getPropsCopy();",
      "",
      "\tconst mongoProps: MongoEntityProps<<FTName | pascalcase>MongoEntity> = {",
      "\t  // put field here",
      "\t}",
      "\treturn mongoProps",
      "\t}",
      "}",
      ""
    ],
    "create-port-repository": [
      "import { BaseRepositoryPort } from 'src/core/ports/repository.base.port';",
      "import { <FTName | pascalcase>MongoEntity } from './model/<FTName | paramcase>.mongo-entity';",
      "import { <FTName | pascalcase>Entity } from '../domain/<FTName | paramcase>.entity';",
      "",
      "export interface <FTName | pascalcase>RepositoryPort",
      "  extends BaseRepositoryPort<<FTName | pascalcase>MongoEntity, <FTName | pascalcase>Entity> {",
      "\t__init__(): void",
      "}",
      ""
    ],
    "create-repo": [
      "import { Injectable } from '@nestjs/common';",
      "import { InjectModel } from '@nestjs/mongoose';",
      "import { BaseRepository } from 'src/core/base-classes/infra/repository.base';",
      "import { Model } from 'mongoose';",
      "import { <FTName | pascalcase>MongoEntity } from './model/<FTName | paramcase>.mongo-entity';",
      "import { <FTName | pascalcase>Entity } from '../domain/<FTName | paramcase>.entity';",
      "import { <FTName | pascalcase>RepositoryPort } from './<FTName | paramcase>.repository.port';",
      "import { <FTName | pascalcase>MongoMapper } from './model/<FTName | paramcase>.mongo-mapper';",
      "",
      "@Injectable()",
      "export class <FTName | pascalcase>Repository",
      "  extends BaseRepository<<FTName | pascalcase>MongoEntity, <FTName | pascalcase>Entity>",
      "  implements <FTName | pascalcase>RepositoryPort {",
      "  constructor(",
      "    @InjectModel(<FTName | pascalcase>MongoEntity.name) private <FTName | pascalcase>Model: Model<<FTName | pascalcase>MongoEntity>",
      "  ) {",
      "    super(<FTName | pascalcase>Model, new <FTName | pascalcase>MongoMapper(<FTName | pascalcase>Entity, <FTName | pascalcase>MongoEntity))",
      "  }",
      "",
      "  // fill me with beautiful method!",
      "  __init__(): void {",
      "    //replace this lonely method!",
      "  }",
      "}",
      ""
    ],
    "create-entity-provider": [
      "import { DynamicModule } from '@nestjs/common';",
      "import { MongooseModule } from '@nestjs/mongoose';",
      "import { <FTName | pascalcase>ConnectionName } from 'src/core/constants/app/<FTName | paramcase>/conn-name.const';",
      "import { ConnectionName } from 'src/core/constants/database/connection-name.const';",
      "import { <FTName | pascalcase>Schema } from './model/<FTName | paramcase>.mongo-entity';",
      "",
      "export const <FTName | camelCase>EntityProviders: DynamicModule[] = [",
      " MongooseModule.forFeature(",
      "     [{ name: '<FTName | pascalcase>PrimaryDB', schema: <FTName | pascalcase>Schema }],",
      "     ConnectionName.DB_PRIMARY,",
      " ),",
      " MongooseModule.forFeature(",
      "     [{ name: '<FTName | pascalcase>OnlineDB', schema: <FTName | pascalcase>Schema }],",
      "     ConnectionName.DB_ONLINE,",
      " ),",
      "];"
    ],
    "create-provider-repository": [
      "import { Inject, Provider } from '@nestjs/common';",
      "import { getModelToken } from '@nestjs/mongoose';",
      "import { Model } from 'mongoose';",
      "import { <FTName | pascalcase>ConnectionName } from 'src/core/constants/app/<FTName | paramcase>/conn-name.const';",
      "import { <FTName | pascalcase>ProviderName } from 'src/core/constants/app/<FTName | paramcase>/provider-name.const';",
      "import { <FTName | pascalcase>MongoEntity } from './model/<FTName | paramcase>.mongo-entity';",
      "import { <FTName | pascalcase>Repository } from './<FTName | paramcase>.repository.service';",
      "",
      "const <FTName | camelCase>Factory = (<FTName | camelCase>: Model<<FTName | pascalcase>MongoEntity>) => new <FTName | pascalcase>Repository(<FTName | camelCase>);",
      "",
      "export const <FTName | camelCase>RepositoryProviders: Provider[] = [",
      " {",
      "   provide: <FTName | pascalcase>ProviderName.PRIMARY,",
      "   useFactory: <FTName | camelCase>Factory,",
      "   inject: [getModelToken(<FTName | pascalcase>ConnectionName.PRIMARY)],",
      " },",
      " {",
      "   provide: <FTName | pascalcase>ProviderName.ONLINE,",
      "   useFactory: <FTName | camelCase>Factory,",
      "   inject: [getModelToken(<FTName | pascalcase>ConnectionName.ONLINE)],",
      " },",
      "];",
      "export const Inject<FTName | pascalcase>Repository = Inject(<FTName | pascalcase>ProviderName.PRIMARY);",
      "export const Inject<FTName | pascalcase>Repository = Inject(<FTName | pascalcase>ProviderName.PRIMARY);"
    ],
    "create-module-repository": [
      "import { Module } from '@nestjs/common';",
      "import { <FTName | camelcase>EntityProviders } from './<FTName | paramcase>.entity.provider';",
      "import { <FTName | camelcase>RepositoryProviders } from './<FTName | paramcase>.repository.provider';",
      "",
      "@Module({",
      "  imports: <FTName | camelcase>EntityProviders,",
      "  providers: <FTName | camelcase>RepositoryProvider,",
      "  exports: <FTName | camelcase>RepositoryProvider,",
      "})",
      "export class <FTName | pascalcase>RepositoryModule {}",
      ""
    ],
    "create provider usecase": [
      "import { Provider } from '@nestjs/common';",
      "",
      "export const <FTName | camelcase>UseCaseProvider: Provider[] = [];",
      ""
    ],
    "create module usecase": [
      "import { Module } from '@nestjs/common';",
      "import { <FTName | pascalcase>RepositoryModule } from '../database/<FTName | paramcase>.repository.module';",
      "import { <FTName | camelcase>UseCaseProvider } from './<FTName | paramcase>.use-case.provider';",
      "",
      "@Module({",
      "  imports: [<FTName | pascalcase>RepositoryModule],",
      "  exports: <FTName | camelcase>UseCaseProvider,",
      "  providers: <FTName | camelcase>UseCaseProvider,",
      "})",
      "export class <FTName | pascalcase>UseCaseModule {}",
      ""
    ],
    "create controller": [
      "import { ControllerProperty } from 'src/core/decorators/controller-decorators/class-decorators/controller-property.decorator';",
      "",
      "@ControllerProperty('v1/<FTName | paramcase?plural>', '<FTName | plural?replace('-',' ')?capitalcase>')",
      "export class <FTName | pascalcase>Controller {",
      "  constructor() {",
      "    // fill above parentheses with use case / repository dependencies",
      "  }",
      "}",
      ""
    ],
    "create module resource": [
      "import { Module } from '@nestjs/common';",
      "import { <FTName | pascalcase>RepositoryModule } from './database/<FTName | paramcase>.repository.module';",
      "import { <FTName | pascalcase>UseCaseModule } from './use-cases/<FTName | paramcase>.use-case.module';",
      "import { <FTName | pascalcase>Controller } from './controller/<FTName | paramcase>.controller';",
      "",
      "@Module({",
      "  imports: [<FTName | pascalcase>UseCaseModule, <FTName | pascalcase>RepositoryModule],",
      "  controllers: [<FTName | pascalcase>Controller],",
      "})",
      "export class <FTName | pascalcase>Module {}",
      ""
    ]
  },
  "folderTemplates.structures": [
    {
      "name": "Create Resource",
      "structure": [
        {
          "fileName": "database/model/<FTName | paramcase>.mongo-entity.ts",
          "template": "create-mongo-entity"
        },
        {
          "fileName": "domain/<FTName | paramcase>.entity.ts",
          "template": "create-entity"
        },
        {
          "fileName": "database/model/<FTName | paramcase>.mongo-mapper.ts",
          "template": "create-mapper"
        },
        {
          "fileName": "database/<FTName | paramcase>.entity.provider.ts",
          "template": "create-entity-provider"
        },
        {
          "fileName": "database/<FTName | paramcase>.repository.port.ts",
          "template": "create-port-repository"
        },
        {
          "fileName": "database/<FTName | paramcase>.repository.service.ts",
          "template": "create-repo"
        },
        {
          "fileName": "database/<FTName | paramcase>.repository.provider.ts",
          "template": "create-provider-repository"
        },
        {
          "fileName": "database/<FTName | paramcase>.repository.module.ts",
          "template": "create-module-repository"
        },
        {
          "fileName": "use-cases/<FTName | paramcase>.use-case.provider.ts",
          "template": "create provider usecase"
        },
        {
          "fileName": "use-cases/<FTName | paramcase>.use-case.module.ts",
          "template": "create module usecase"
        },
        {
          "fileName": "controller/<FTName | paramcase>.controller.ts",
          "template": "create controller"
        },
        {
          "fileName": "<FTName | paramcase>.module.ts",
          "template": "create module resource"
        }
      ]
    }
  ]
}
